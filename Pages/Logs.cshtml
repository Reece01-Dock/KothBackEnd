@page
@model KothBackend.Pages.LogsModel
@{
    ViewData["Title"] = "Request Logs";
}

<!DOCTYPE html>
<html>
<head>
    <title>Request Logs</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .log-details {
            max-height: 200px;
            overflow-y: auto;
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
        }
        .timestamp {
            white-space: nowrap;
        }
        .method-badge {
            width: 80px;
        }
        pre {
            margin: 0;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        .json-content {
            font-family: monospace;
        }
        #autoRefreshStatus {
            font-size: 0.9em;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container-fluid py-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1>Request Logs</h1>
            <div>
                <button id="toggleRefresh" class="btn btn-outline-primary me-2">Auto-refresh: ON</button>
                <span id="autoRefreshStatus">Next refresh in 5s</span>
            </div>
        </div>
        <div class="mb-3">
            <form id="clearForm" method="post" asp-page-handler="Clear" class="d-inline">
                <button type="submit" class="btn btn-danger">Clear Logs</button>
            </form>
            <span class="ms-3">Showing last @Model.Logs.Count() entries</span>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Timestamp (UTC)</th>
                        <th>ID</th>
                        <th>Method</th>
                        <th>Path</th>
                        <th>Status</th>
                        <th>Duration</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var log in Model.Logs)
                    {
                            <tr>
                                <td class="timestamp">@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff")</td>
                                <td><code>@log.Id</code></td>
                                <td>
                                    <span class="badge method-badge @GetMethodClass(log.Method)">
                                    @log.Method
                                    </span>
                                </td>
                                <td>
                                @log.Path@log.QueryString
                                </td>
                                <td>
                                    <span class="badge @GetStatusClass(log.ResponseStatusCode)">
                                    @log.ResponseStatusCode
                                    </span>
                                </td>
                                <td>@log.Duration.TotalMilliseconds.ToString("0.00")ms</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary" type="button" 
                                            data-bs-toggle="collapse" data-bs-target="#details-@log.Id">
                                        View Details
                                    </button>
                                </td>
                            </tr>
                            <tr>
                                <td colspan="7" class="p-0">
                                    <div class="collapse" id="details-@log.Id">
                                        <div class="card card-body m-2">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <h6 class="mb-3">Request</h6>
                                                    <div class="mb-3">
                                                        <strong>Headers</strong>
                                                        <div class="log-details">
                                                            <pre>@GetHeadersString(log.Headers)</pre>
                                                        </div>
                                                    </div>

                                                @if (!string.IsNullOrEmpty(log.Body))
                                                {
                                                            <div class="mb-3">
                                                                <strong>Body</strong>
                                                                <div class="log-details">
                                                                    <pre class="json-content">@FormatJson(log.Body)</pre>
                                                                </div>
                                                            </div>
                                                }
                                                </div>

                                                <div class="col-md-6">
                                                    <h6 class="mb-3">Response</h6>
                                                    <div class="mb-3">
                                                        <strong>Headers</strong>
                                                        <div class="log-details">
                                                            <pre>@GetHeadersString(log.ResponseHeaders)</pre>
                                                        </div>
                                                    </div>

                                                @if (!string.IsNullOrEmpty(log.ResponseBody))
                                                {
                                                            <div class="mb-3">
                                                                <strong>Body</strong>
                                                                <div class="log-details">
                                                                    <pre class="json-content">@FormatJson(log.ResponseBody)</pre>
                                                                </div>
                                                            </div>
                                                }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let autoRefreshEnabled = true;
        let countdown = 5;
        const toggleBtn = document.getElementById('toggleRefresh');
        const statusSpan = document.getElementById('autoRefreshStatus');
        const clearForm = document.getElementById('clearForm');

        function updateCountdown() {
            if (autoRefreshEnabled) {
                statusSpan.textContent = `Next refresh in ${countdown}s`;
                countdown--;
                if (countdown < 0) {
                    countdown = 5;
                    window.location.reload();
                }
            }
        }

        toggleBtn.addEventListener('click', () => {
            autoRefreshEnabled = !autoRefreshEnabled;
            toggleBtn.textContent = `Auto-refresh: ${autoRefreshEnabled ? 'ON' : 'OFF'}`;
            toggleBtn.classList.toggle('btn-outline-primary');
            toggleBtn.classList.toggle('btn-outline-secondary');
            if (autoRefreshEnabled) {
                countdown = 5;
                statusSpan.textContent = `Next refresh in ${countdown}s`;
            } else {
                statusSpan.textContent = 'Auto-refresh disabled';
            }
        });

        // Handle clear logs with AJAX
        clearForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            try {
                const response = await fetch('?handler=Clear', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });
                if (response.ok) {
                    window.location.reload();
                }
            } catch (error) {
                console.error('Error clearing logs:', error);
            }
        });

        setInterval(updateCountdown, 1000);
    </script>
</body>
</html>

@functions {
    private string GetMethodClass(string method) => method.ToUpper() switch
    {
        "GET" => "bg-success text-white",
        "POST" => "bg-primary text-white",
        "PUT" => "bg-warning text-dark",
        "DELETE" => "bg-danger text-white",
        "PATCH" => "bg-info text-dark",
        _ => "bg-secondary text-white"
    };

    private string GetStatusClass(int statusCode) => statusCode switch
    {
        >= 200 and < 300 => "bg-success",
        >= 300 and < 400 => "bg-info",
        >= 400 and < 500 => "bg-warning",
        >= 500 => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetHeadersString(Dictionary<string, string> headers)
    {
        return string.Join("\n", headers.Select(h => $"{h.Key}: {h.Value}"));
    }

    private string FormatJson(string content)
    {
        try
        {
            if (content.StartsWith("{") || content.StartsWith("["))
            {
                var obj = System.Text.Json.JsonSerializer.Deserialize<object>(content);
                return System.Text.Json.JsonSerializer.Serialize(obj, new System.Text.Json.JsonSerializerOptions
                    {
                        WriteIndented = true
                    });
            }
        }
        catch
        {
            // If it's not valid JSON, return the content as-is
        }
        return content;
    }
}