@page
@model KothBackend.Pages.LogsModel
@{
    ViewData["Title"] = "Request Logs";
}

<!DOCTYPE html>
<html>
<head>
    <title>Request Logs</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .log-details {
            max-height: 200px;
            overflow-y: auto;
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
        }
        .timestamp {
            white-space: nowrap;
        }
        .method-badge {
            width: 80px;
        }
        pre {
            margin: 0;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        .json-content {
            font-family: monospace;
        }
        .connection-status {
            font-size: 0.9em;
            padding: 4px 8px;
            border-radius: 4px;
        }
        .connection-status.connected {
            background-color: #d4edda;
            color: #155724;
        }
        .connection-status.disconnected {
            background-color: #f8d7da;
            color: #721c24;
        }
        tr.new-log {
            animation: highlight 2s ease-out;
        }
        keyframes highlight {
            0% { background-color: #fff3cd; }
            100% { background-color: transparent; }
        }
        .client-log {
            font-family: monospace;
            font-size: 0.9em;
            padding: 2px 4px;
            border-bottom: 1px solid #eee;
        }
    </style>
</head>
<body>
    <div class="container-fluid py-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h1>Request Logs</h1>
            <div>
                <span id="connectionStatus" class="connection-status">Connecting...</span>
            </div>
        </div>
        <div class="mb-3">
            <form id="clearForm" method="post" asp-page-handler="Clear" class="d-inline">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-danger">Clear Logs</button>
            </form>
            <span class="ms-3">Showing last <span id="logCount">@Model.Logs.Count()</span> entries</span>
        </div>
        <div class="mb-3">
            <details>
                <summary class="btn btn-outline-secondary btn-sm">Client Logs</summary>
                <div id="clientLogs" class="mt-2 p-2 bg-light" style="max-height: 200px; overflow-y: auto;">
                </div>
            </details>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Timestamp (UTC)</th>
                        <th>ID</th>
                        <th>Method</th>
                        <th>Path</th>
                        <th>Status</th>
                        <th>Duration</th>
                        <th>Details</th>
                    </tr>
                </thead>
                <tbody id="logTableBody">
                    @foreach (var log in Model.Logs)
                    {
                        <tr id="log-@log.Id">
                            <td class="timestamp">@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff")</td>
                            <td><code>@log.Id</code></td>
                            <td>
                                <span class="badge method-badge @GetMethodClass(log.Method)">
                                    @log.Method
                                </span>
                            </td>
                            <td>
                                @log.Path@log.QueryString
                            </td>
                            <td>
                                <span class="badge @GetStatusClass(log.ResponseStatusCode)">
                                    @log.ResponseStatusCode
                                </span>
                            </td>
                            <td>@log.Duration.TotalMilliseconds.ToString("0.00")ms</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" type="button" 
                                        data-bs-toggle="collapse" data-bs-target="#details-@log.Id">
                                    View Details
                                </button>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="7" class="p-0">
                                <div class="collapse" id="details-@log.Id">
                                    <div class="card card-body m-2">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <h6 class="mb-3">Request</h6>
                                                <div class="mb-3">
                                                    <strong>Headers</strong>
                                                    <div class="log-details">
                                                        <pre>@GetHeadersString(log.Headers)</pre>
                                                    </div>
                                                </div>
                                                
                                                @if (!string.IsNullOrEmpty(log.Body))
                                                {
                                                    <div class="mb-3">
                                                        <strong>Body</strong>
                                                        <div class="log-details">
                                                            <pre class="json-content">@FormatJson(log.Body)</pre>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                            
                                            <div class="col-md-6">
                                                <h6 class="mb-3">Response</h6>
                                                <div class="mb-3">
                                                    <strong>Headers</strong>
                                                    <div class="log-details">
                                                        <pre>@GetHeadersString(log.ResponseHeaders)</pre>
                                                    </div>
                                                </div>
                                                
                                                @if (!string.IsNullOrEmpty(log.ResponseBody))
                                                {
                                                    <div class="mb-3">
                                                        <strong>Body</strong>
                                                        <div class="log-details">
                                                            <pre class="json-content">@FormatJson(log.ResponseBody)</pre>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <template id="logRowTemplate">
        <tr>
            <td class="timestamp"></td>
            <td><code></code></td>
            <td>
                <span class="badge method-badge"></span>
            </td>
            <td class="path"></td>
            <td>
                <span class="badge"></span>
            </td>
            <td class="duration"></td>
            <td>
                <button class="btn btn-sm btn-outline-primary" type="button" data-bs-toggle="collapse">
                    View Details
                </button>
            </td>
        </tr>
    </template>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize DOM elements
        const statusElement = document.getElementById('connectionStatus');
        const logCountElement = document.getElementById('logCount');
        const logTableBody = document.getElementById('logTableBody');
        const clearForm = document.getElementById('clearForm');
        let logCount = parseInt(logCountElement.textContent) || 0;

        const consoleLog = console.log;
        console.log = function(...args) {
            consoleLog.apply(console, args);
            const log = document.createElement('div');
            log.className = 'client-log';
            log.textContent = args.map(arg => 
                typeof arg === 'object' ? JSON.stringify(arg) : arg
            ).join(' ');
            document.getElementById('clientLogs').appendChild(log);
        };

        // Style helper functions
        function getMethodClass(method) {
            if (!method) return 'bg-secondary text-white';

            switch (method.toUpperCase()) {
                case 'GET': return 'bg-success text-white';
                case 'POST': return 'bg-primary text-white';
                case 'PUT': return 'bg-warning text-dark';
                case 'DELETE': return 'bg-danger text-white';
                case 'PATCH': return 'bg-info text-dark';
                default: return 'bg-secondary text-white';
            }
        }

        function getStatusClass(statusCode) {
            if (statusCode >= 200 && statusCode < 300) return 'bg-success';
            if (statusCode >= 300 && statusCode < 400) return 'bg-info';
            if (statusCode >= 400 && statusCode < 500) return 'bg-warning';
            if (statusCode >= 500) return 'bg-danger';
            return 'bg-secondary';
        }

        function formatJson(content) {
            try {
                if (content.startsWith('{') || content.startsWith('[')) {
                    return JSON.stringify(JSON.parse(content), null, 2);
                }
            } catch {}
            return content;
        }

        // Log rendering functions
        function createDetailsSection(log) {
            if (!log) return '<div>No details available</div>';

            return `
                <div class="card card-body m-2">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="mb-3">Request</h6>
                            <div class="mb-3">
                                <strong>Headers</strong>
                                <div class="log-details">
                                    <pre>${log.headers ? Object.entries(log.headers).map(([k,v]) => `${k}: ${v}`).join('\n') : 'No headers'}</pre>
                                </div>
                            </div>
                            ${log.body ? `
                            <div class="mb-3">
                                <strong>Body</strong>
                                <div class="log-details">
                                    <pre class="json-content">${formatJson(log.body)}</pre>
                                </div>
                            </div>
                            ` : ''}
                        </div>
                        <div class="col-md-6">
                            <h6 class="mb-3">Response</h6>
                            <div class="mb-3">
                                <strong>Headers</strong>
                                <div class="log-details">
                                    <pre>${log.responseHeaders ? Object.entries(log.responseHeaders).map(([k,v]) => `${k}: ${v}`).join('\n') : 'No headers'}</pre>
                                </div>
                            </div>
                            ${log.responseBody ? `
                            <div class="mb-3">
                                <strong>Body</strong>
                                <div class="log-details">
                                    <pre class="json-content">${formatJson(log.responseBody)}</pre>
                                </div>
                            </div>
                            ` : ''}
                        </div>
                    </div>
                </div>`;
        }

        function addLogToTable(log) {
            try {
                console.log('Received log:', log);

                if (!log) {
                    console.error('Received undefined log');
                    return;
                }

                // Create main log row
                const logRow = document.createElement('tr');
                logRow.id = `log-${log.Id || 'unknown'}`;
                logRow.classList.add('new-log');

                // Format the timestamp safely
                let timestamp;
                try {
                    timestamp = log.Timestamp ? new Date(log.Timestamp).toISOString().replace('T', ' ').substr(0, 23) : 'Invalid Date';
                } catch (e) {
                    timestamp = 'Invalid Date';
                    console.error('Error parsing timestamp:', e);
                }

                logRow.innerHTML = `
                    <td class="timestamp">${timestamp}</td>
                    <td><code>${log.Id || 'unknown'}</code></td>
                    <td>
                        <span class="badge method-badge ${getMethodClass(log.Method)}">${log.Method || 'UNKNOWN'}</span>
                    </td>
                    <td>${log.Path || ''}${log.QueryString || ''}</td>
                    <td>
                        <span class="badge ${getStatusClass(log.ResponseStatusCode || 0)}">${log.ResponseStatusCode || 'N/A'}</span>
                    </td>
                    <td>${log.Duration ? parseFloat(log.Duration.match(/[\d.]+/)[0]).toFixed(2) : '0.00'}ms</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" type="button" 
                                data-bs-toggle="collapse" data-bs-target="#details-${log.Id || 'unknown'}">
                            View Details
                        </button>
                    </td>
                `;

                const detailsRow = document.createElement('tr');
                detailsRow.innerHTML = `
                    <td colspan="7" class="p-0">
                        <div class="collapse" id="details-${log.Id || 'unknown'}">
                            <div class="card card-body m-2">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6 class="mb-3">Request</h6>
                                        <div class="mb-3">
                                            <strong>Headers</strong>
                                            <div class="log-details">
                                                <pre>${log.Headers ? Object.entries(log.Headers).map(([k,v]) => `${k}: ${v}`).join('\n') : 'No headers'}</pre>
                                            </div>
                                        </div>
                                        ${log.Body ? `
                                        <div class="mb-3">
                                            <strong>Body</strong>
                                            <div class="log-details">
                                                <pre class="json-content">${formatJson(log.Body)}</pre>
                                            </div>
                                        </div>
                                        ` : ''}
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="mb-3">Response</h6>
                                        <div class="mb-3">
                                            <strong>Headers</strong>
                                            <div class="log-details">
                                                <pre>${log.ResponseHeaders ? Object.entries(log.ResponseHeaders).map(([k,v]) => `${k}: ${v}`).join('\n') : 'No headers'}</pre>
                                            </div>
                                        </div>
                                        ${log.ResponseBody ? `
                                        <div class="mb-3">
                                            <strong>Full Response Body</strong>
                                            <div class="log-details">
                                                <pre class="json-content">${formatJson(log.ResponseBody)}</pre>
                                            </div>
                                        </div>
                                        ` : ''}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                `;

                if (logTableBody.firstChild) {
                    logTableBody.insertBefore(detailsRow, logTableBody.firstChild);
                    logTableBody.insertBefore(logRow, logTableBody.firstChild);
                } else {
                    logTableBody.appendChild(logRow);
                    logTableBody.appendChild(detailsRow);
                }

                logCount++;
                logCountElement.textContent = logCount;
                setTimeout(() => logRow.classList.remove('new-log'), 2000);
            } catch (error) {
                console.error('Error adding log to table:', error, 'Log data:', log);
            }
        }

        // Server-Sent Events setup
        function connectSSE() {
            console.log('Connecting to event stream...');
            const eventSource = new EventSource('?handler=Stream');

            eventSource.onopen = () => {
                console.log('Connection established');
                statusElement.textContent = 'Connected';
                statusElement.className = 'connection-status connected';
            };

            eventSource.onmessage = (event) => {
                try {
                    console.log('Raw event data:', event.data); // Debug logging
                    const log = JSON.parse(event.data);
                    if (!log) {
                        console.error('Parsed log is undefined');
                        return;
                    }
                    addLogToTable(log);
                } catch (error) {
                    console.error('Error processing event:', error, 'Event data:', event.data);
                }
            };

            eventSource.onerror = () => {
                console.log('Connection lost, attempting to reconnect...');
                statusElement.textContent = 'Disconnected - Reconnecting...';
                statusElement.className = 'connection-status disconnected';
                eventSource.close();
                setTimeout(connectSSE, 3000);
            };

            return eventSource;
        }

        // Clear logs handler
        clearForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            try {
                const response = await fetch('?handler=Clear', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });
                if (response.ok) {
                    logTableBody.innerHTML = '';
                    logCount = 0;
                    logCountElement.textContent = '0';
                }
            } catch (error) {
                console.error('Error clearing logs:', error);
            }
        });

        // Start SSE connection as soon as the page loads
        connectSSE();
    </script>
</body>
</html>

@functions {
    private string GetMethodClass(string method) => method.ToUpper() switch
    {
        "GET" => "bg-success text-white",
        "POST" => "bg-primary text-white",
        "PUT" => "bg-warning text-dark",
        "DELETE" => "bg-danger text-white",
        "PATCH" => "bg-info text-dark",
        _ => "bg-secondary text-white"
    };

    private string GetStatusClass(int statusCode) => statusCode switch
    {
        >= 200 and < 300 => "bg-success",
        >= 300 and < 400 => "bg-info",
        >= 400 and < 500 => "bg-warning",
        >= 500 => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetHeadersString(Dictionary<string, string> headers)
    {
        return string.Join("\n", headers.Select(h => $"{h.Key}: {h.Value}"));
    }

    private string FormatJson(string content)
    {
        try
        {
            if (content.StartsWith("{") || content.StartsWith("["))
            {
                var obj = System.Text.Json.JsonSerializer.Deserialize<object>(content);
                return System.Text.Json.JsonSerializer.Serialize(obj, new System.Text.Json.JsonSerializerOptions
                    {
                        WriteIndented = true
                    });
            }
        }
        catch
        {
            // If it's not valid JSON, return the content as-is
        }
        return content;
    }
}